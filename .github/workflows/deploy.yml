name: Build and Deploy to Raspberry Pi

permissions:
  packages: write
  contents: read

on:
  push:
    branches: [mep]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Lowercase repository_owner
        id: lowercase
        run: echo "repo_lower=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Generate image tag
        id: version
        run: echo "tag=v$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-php-${{ hashFiles('composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image for ARM64
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/arm64/v8
          push: true
          tags: |
            ghcr.io/${{ steps.lowercase.outputs.repo_lower }}/cv-maker:latest
            ghcr.io/${{ steps.lowercase.outputs.repo_lower }}/cv-maker:${{ steps.version.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Lowercase repository_owner
        id: lowercase
        run: echo "repo_lower=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Write SSH key
        run: |
          echo "${{ secrets.RASPBERRY_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Deploy to Raspberry Pi using Docker Compose
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no ${{ secrets.RASPBERRY_USER }}@${{ secrets.RASPBERRY_HOST }} << EOF
          set -e
          cd /var/www/cv-maker

          echo "Création du fichier .env"
          cat > .env << EOL
          SERVER_NAME=92.162.186.29
          CADDY_MERCURE_JWT_SECRET=${{ secrets.CADDY_MERCURE_JWT_SECRET }}
          DATABASE_URL=mysql://${{ secrets.MYSQL_USER }}:${{ secrets.MYSQL_PASSWORD }}@database:3306/${{ secrets.MYSQL_DATABASE }}?serverVersion=${{ secrets.MYSQL_VERSION }}?charset=utf8mb4"
          MERCURE_URL=http://localhost/.well-known/mercure
          MERCURE_PUBLIC_URL=http://92.162.186.29/.well-known/mercure
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          APP_SECRET=${{ secrets.APP_SECRET }}
          EOL

          echo "Connexion à GHCR"
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          echo "Nettoyage Docker (containers et volumes orphelins)"
          docker container prune -f
          docker volume prune -f

          echo "Mise à jour du tag dans compose-prod.yml"
          sed -i 's|image: ghcr.io/.*/cv-maker:.*|image: ghcr.io/${{ steps.lowercase.outputs.repo_lower }}/cv-maker:${{ needs.build-and-push.outputs.image_tag }}|' compose-prod.yml

          echo "Pull image"
          docker pull ghcr.io/${{ steps.lowercase.outputs.repo_lower }}/cv-maker:${{ needs.build-and-push.outputs.image_tag }}

          echo "Docker Compose up"
          docker compose -f compose-prod.yml up -d --remove-orphans
          EOF